name: Create GitHub Release

on: [push]
  #:
#    tags:
 #     - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  build:
    name: Build the project with msbuild
    runs-on: windows-latest
    env:
      SOLUTION_FILE_PATH: src/AdventOfCode2020/
      BUILD_CONFIGURATION: Release
      PLATFORM: x64

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Restore NuGet packages
        working-directory: ${{env.GITHUB_WORKSPACE}}
        run: nuget restore ${{env.SOLUTION_FILE_PATH}}

      - name: Build
        working-directory: ${{env.GITHUB_WORKSPACE}}
        # Add additional options to the MSBuild command line here (like platform or verbosity level).
        # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
        run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} ${{env.SOLUTION_FILE_PATH}}

      - name: zip build
        run: zip --junk-paths my-artifact ${{env.SOLUTION_FILE_PATH}}${{env.PLATFORM}}/${{env.BUILD_CONFIGURATION}}
        
      - name: Upload builds
        uses: actions/upload-artifact@v2
        with:
          name: build
          path: ./my-artifact.zip

#===================================#
  deploy:
    name: Deploy to GitHub releases
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: Complete list of all .exe of my C++ solutions for the 2020 Advent Of Code puzzles.
          draft: false
          prerelease: false

      - name: Test
        run: echo "${{ steps.create_release.outputs.upload_url }}"

      - name: Store release ID for asset upload
        uses: actions/upload-artifact@v2
        with:
          name: assetID
          path: ${{ steps.create_release.outputs.upload_url }}

#===================================#
  upload:
    name: Deploy to GitHub releases
    runs-on: ubuntu-latest
    needs: [build, deploy]

    steps:
      - name: Download the upload url
        uses: actions/download-artifact@v2
        with:
          name: assetID
          path: uploadURL/

      - name: Download the build asset to upload
        uses: actions/download-artifact@v2
        with:
          name: build
          path: build/

      - name: Upload Release Asset
        id: upload-release-asset 

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OWNER: Graygzou
          REPO_NAME: advent-of-code-2020
        run: |
          curl \
          -X PATCH \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{env.OWNER}}/${{env.REPO_NAME}}/releases/assets/${{echo "./uploadURL/assetID"}}" \
          -d '{"name":"./build/my-artifact.zip"}'
           
        #uses: actions/upload-release-asset@v1
        #with:
        #  upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        #  asset_path: ./my-artifact.zip
        #  asset_name: my-artifact.zip
        #  asset_content_type: application/zip